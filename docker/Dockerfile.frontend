# Use the node:lts-alpine image as the base image for the build
FROM node:lts-alpine AS base

# Create a new stage called "dependencies" based on the "base" image
FROM base AS dependencies

# Enable Corepack, which provides a consistent way to manage package managers
RUN corepack enable

# Install compatibility libraries
RUN apk add --no-cache libc6-compat

# Set the working directory to /app
WORKDIR /app

# Install Turbo CLI globally
RUN yarn global add turbo

# Copy all the files to the working directory
COPY . .

# Prune the frontend project to remove unnecessary files
RUN turbo prune frontend --docker

# Create a new stage called "builder" based on the "base" image
FROM base AS builder

# Enable Corepack again in the builder stage
RUN corepack enable

# Install compatibility libraries
RUN apk add --no-cache libc6-compat

# Set the working directory to /app
WORKDIR /app

# Copy .gitignore file to the working directory
COPY .gitignore .gitignore

# Copy package management files to the working directory
COPY --from=dependencies /app/out/json/ .

# Copy package.json and yarn.lock files to the working directory
COPY --from=dependencies /app/out/yarn.lock ./yarn.lock

# Install project dependencies using Yarn
RUN yarn install

# Copy the rest of the application files to the working directory
COPY --from=dependencies /app/out/full/ .

# Copy the .env file to the frontend project directory
COPY .env ./projects/frontend/.env

# Copy the turbo.json file to the working directory
COPY turbo.json turbo.json

# Set the environment variable to production
ENV ENVIRONMENT=production

# Build the application using Yarn
RUN yarn turbo build --filter=frontend...

# Create a new stage called "runner" based on the "base" image
FROM base AS runner

# Install additional packages: curl and bash
RUN apk add --no-cache curl bash

# Set the working directory to /app
WORKDIR /app

# Create a new system group with GID 1001
RUN addgroup --system --gid 1001 koushikpuppala

# Create a new system user with UID 1001 and add it to the "koushikpuppala" group
RUN adduser --system --uid 1001 frontend --ingroup koushikpuppala

# Copy the standalone directory from the "builder" stage to the current working directory, with proper ownership
COPY --from=builder --chown=frontend:koushikpuppala /app/projects/frontend/.next/standalone ./

# Copy the static directory from the "builder" stage to the projects/frontend/.next/static directory, with proper ownership
COPY --from=builder --chown=frontend:koushikpuppala /app/projects/frontend/.next/static ./projects/frontend/.next/static

# Copy the public directory from the "builder" stage to the projects/frontend/public directory, with proper ownership
COPY --from=builder --chown=frontend:koushikpuppala /app/projects/frontend/public ./projects/frontend/public

# Switch to the "frontend" user
USER frontend

# Expose port 3000 for the application
EXPOSE 3000

# Set the PORT environment variable to 3000
ENV PORT=3000

# Set the working directory to the frontend project directory
WORKDIR /app/projects/frontend

# Start the application using Node.js
CMD ["node", "server.js"]
