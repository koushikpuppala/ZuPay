# Use the node:lts image as the base image for the build
FROM node:lts AS base

# Create a new stage called "dependencies" based on the "base" image
FROM base AS dependencies

# Enable Corepack, which provides a consistent way to manage package managers
RUN corepack enable

# Install compatibility libraries
RUN apk add --no-cache libc6-compat

# Set the working directory to /app
WORKDIR /app

# Install Turbo CLI globally
RUN yarn global add turbo

# Copy all the files to the working directory
COPY . .

# Prune the backend project to remove unnecessary files
RUN turbo prune backend --docker

# Create a new stage called "builder" based on the "base" image
FROM base AS builder

# Enable Corepack again in the builder stage
RUN corepack enable

# Install compatibility libraries
RUN apk add --no-cache libc6-compat

# Set the working directory to /app
WORKDIR /app

# Copy .gitignore file to the working directory
COPY .gitignore .gitignore

# Copy package management files to the working directory
COPY --from=dependencies /app/out/json/ .

# Copy package.json and yarn.lock files to the working directory
COPY --from=dependencies /app/out/yarn.lock ./yarn.lock

# Install project dependencies using Yarn
RUN yarn install

# Copy the rest of the application files to the working directory
COPY --from=dependencies /app/out/full/ .

# Copy the .env file to the backend project directory
COPY .env ./projects/backend/.env

# Copy the turbo.json file to the working directory
COPY turbo.json turbo.json

# Set the environment variable to production
ENV ENVIRONMENT=production

# Build the application using Yarn
RUN yarn turbo build --filter=backend...

# Create a new stage called "runner" based on the "base" image
FROM base AS runner

# Install additional packages: curl and bash
RUN apk add --no-cache curl bash

# Set the working directory to /app
WORKDIR /app

# Create a new system group with GID 1001
RUN addgroup --system --gid 1001 koushikpuppala

# Create a new system user with UID 1001 and add it to the "koushikpuppala" group
RUN adduser --system --uid 1001 backend --ingroup koushikpuppala

# Copy the built application files from the "builder" stage to the "runner" stage
COPY --from=builder --chown=backend:koushikpuppala /app .

# Switch to the "backend" user
USER backend

# Expose port 8080 for the application
EXPOSE 8080

# Set the PORT environment variable to 8080
ENV PORT=8080

# Set the working directory to the backend project directory
WORKDIR /app/projects/backend

# Start the application using Node.js
CMD ["node", "-r ts-node/register/transpile-only -r tsconfig-paths/register", "dist/index.js"]
